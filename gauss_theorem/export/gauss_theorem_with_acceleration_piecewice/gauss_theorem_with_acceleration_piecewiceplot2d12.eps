%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 10 окт€бр€ 2024 г. 14:19:41 EEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
37.0000 -1.00000 350.498 353.000 rc
0.470588 0 0.0549020 RG
newpath
38.0000 351.000 m
39.8270 351.000 l
41.4166 351.000 l
43.2044 351.000 l
45.0040 351.000 l
46.7950 351.000 l
48.4556 351.000 l
50.1750 351.000 l
51.9532 351.000 l
53.7256 351.000 l
55.5489 351.000 l
57.1548 351.000 l
58.9626 351.000 l
60.7779 351.000 l
62.5273 351.000 l
64.1158 351.000 l
66.0048 351.000 l
67.6050 351.000 l
69.4665 351.000 l
71.1142 351.000 l
72.9219 351.000 l
74.6433 351.000 l
76.4395 351.000 l
78.0889 351.000 l
79.8680 351.000 l
81.7160 351.000 l
83.3246 351.000 l
85.0621 351.000 l
86.8570 351.000 l
88.6130 351.000 l
90.3120 351.000 l
92.1984 351.000 l
93.8935 351.000 l
95.7033 351.000 l
97.3433 351.000 l
99.1362 351.000 l
100.823 351.000 l
102.586 351.000 l
104.310 351.000 l
106.115 351.000 l
107.854 351.000 l
109.631 351.000 l
111.394 351.000 l
113.014 351.000 l
114.871 351.000 l
116.532 351.000 l
118.302 351.000 l
119.997 351.000 l
121.879 351.000 l
123.508 351.000 l
125.358 351.000 l
127.043 351.000 l
128.887 350.999 l
130.478 350.999 l
132.290 350.998 l
134.040 350.997 l
135.789 350.995 l
137.531 350.992 l
139.205 350.989 l
141.015 350.984 l
142.740 350.978 l
144.555 350.971 l
146.198 350.963 l
148.014 350.953 l
149.754 350.941 l
151.489 350.927 l
153.302 350.910 l
154.971 350.892 l
156.680 350.872 l
158.568 350.846 l
160.277 350.820 l
162.025 350.791 l
163.803 350.757 l
165.437 350.723 l
167.178 350.683 l
168.907 350.640 l
170.756 350.589 l
172.387 350.540 l
174.270 350.479 l
175.968 350.418 l
177.649 350.354 l
179.457 350.279 l
181.271 350.198 l
182.923 350.119 l
184.676 350.029 l
186.387 349.935 l
188.242 349.826 l
189.847 349.725 l
191.691 349.602 l
193.424 349.478 l
195.140 349.348 l
196.858 349.210 l
198.610 349.061 l
200.467 348.893 l
202.169 348.730 l
203.850 348.560 l
205.647 348.368 l
207.439 348.166 l
209.048 347.975 l
210.954 347.737 l
212.549 347.528 l
214.415 347.270 l
216.195 347.011 l
217.785 346.769 l
219.573 346.483 l
221.372 346.182 l
223.163 345.867 l
224.824 345.561 l
226.543 345.231 l
228.321 344.873 l
230.094 344.501 l
231.917 344.099 l
233.523 343.731 l
235.331 343.298 l
237.146 342.844 l
238.896 342.387 l
240.484 341.955 l
242.373 341.420 l
243.973 340.948 l
245.835 340.376 l
247.482 339.850 l
249.290 339.248 l
251.012 338.652 l
252.808 338.006 l
254.457 337.388 l
256.236 336.696 l
258.084 335.949 l
259.693 335.272 l
261.430 334.515 l
263.225 333.702 l
264.981 332.875 l
266.680 332.045 l
268.567 331.088 l
270.262 330.194 l
272.072 329.203 l
273.712 328.272 l
275.505 327.216 l
277.192 326.186 l
278.955 325.069 l
280.679 323.936 l
282.484 322.706 l
284.222 321.476 l
286.000 320.171 l
287.763 318.828 l
289.383 317.550 l
291.240 316.031 l
292.900 314.621 l
294.671 313.063 l
296.366 311.517 l
298.248 309.734 l
299.877 308.132 l
301.727 306.245 l
303.412 304.460 l
305.256 302.434 l
306.847 300.620 l
308.659 298.477 l
310.409 296.327 l
312.158 294.096 l
313.900 291.786 l
315.574 289.483 l
317.384 286.897 l
319.109 284.334 l
320.924 281.527 l
322.567 278.887 l
324.383 275.852 l
326.123 272.824 l
327.858 269.681 l
329.670 266.261 l
331.340 262.978 l
333.049 259.480 l
334.937 255.447 l
336.646 251.633 l
338.394 247.563 l
340.171 243.240 l
341.805 239.091 l
343.547 234.474 l
345.275 229.682 l
347.124 224.310 l
348.756 219.344 l
350.638 213.335 l
352.337 207.637 l
354.018 201.727 l
355.825 195.046 l
357.640 187.974 l
359.291 181.201 l
361.045 173.626 l
362.756 165.826 l
364.611 156.878 l
366.216 148.690 l
368.060 138.729 l
369.793 128.777 l
371.509 118.307 l
373.226 107.160 l
374.978 95.0367 l
376.835 81.2682 l
378.538 67.7262 l
380.219 53.4041 l
382.015 36.9284 l
383.808 19.1460 l
385.498 1.00000 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
38.0000 353.000 m
385.498 353.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
203 374 16 15 rc
newpath
208.906 377.390 m
215.437 377.390 l
214.734 379.671 l
214.500 379.671 l
214.583 379.338 214.625 379.041 214.625 378.781  c
214.625 378.468 214.526 378.234 214.328 378.078  c
214.182 377.963 213.812 377.906 213.218 377.906  c
212.546 377.906 l
210.843 383.828 l
210.625 384.578 210.515 385.041 210.515 385.218  c
210.515 385.375 210.583 385.505 210.718 385.609  c
210.854 385.713 211.093 385.765 211.437 385.765  c
211.734 385.765 l
211.656 386.000 l
207.906 386.000 l
207.984 385.765 l
208.140 385.765 l
208.474 385.765 208.729 385.713 208.906 385.609  c
209.031 385.536 209.143 385.406 209.242 385.218  c
209.341 385.031 209.479 384.630 209.656 384.015  c
211.437 377.906 l
210.921 377.906 l
210.432 377.906 210.033 377.968 209.726 378.093  c
209.419 378.218 209.174 378.403 208.992 378.648  c
208.809 378.893 208.656 379.234 208.531 379.671  c
208.296 379.671 l
208.906 377.390 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 353.000 m
38.0000 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
40.5468 371.093 m
40.5468 369.958 40.7161 368.981 41.0546 368.164  c
41.3932 367.346 41.8489 366.739 42.4218 366.343  c
42.8593 366.020 43.3125 365.859 43.7812 365.859  c
44.5416 365.859 45.2239 366.250 45.8281 367.031  c
46.5885 367.989 46.9687 369.291 46.9687 370.937  c
46.9687 372.093 46.8020 373.072 46.4687 373.875  c
46.1354 374.677 45.7109 375.260 45.1953 375.625  c
44.6796 375.989 44.1822 376.171 43.7031 376.171  c
42.7552 376.171 41.9687 375.614 41.3437 374.500  c
40.8125 373.552 40.5468 372.416 40.5468 371.093  c
h
41.9843 371.281 m
41.9843 372.645 42.1510 373.760 42.4843 374.625  c
42.7656 375.354 43.1822 375.718 43.7343 375.718  c
43.9947 375.718 44.2656 375.599 44.5468 375.359  c
44.8281 375.119 45.0416 374.724 45.1875 374.171  c
45.4166 373.328 45.5312 372.140 45.5312 370.609  c
45.5312 369.484 45.4114 368.541 45.1718 367.781  c
45.0052 367.218 44.7812 366.822 44.5000 366.593  c
44.3020 366.427 44.0572 366.343 43.7656 366.343  c
43.4427 366.343 43.1510 366.494 42.8906 366.796  c
42.5364 367.203 42.2968 367.841 42.1718 368.710  c
42.0468 369.580 41.9843 370.437 41.9843 371.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
124.874 353.000 m
124.874 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
127.765 367.046 m
130.171 365.859 l
130.421 365.859 l
130.421 374.250 l
130.421 374.802 130.445 375.148 130.492 375.289  c
130.539 375.429 130.635 375.536 130.781 375.609  c
130.927 375.682 131.224 375.724 131.671 375.734  c
131.671 376.000 l
127.937 376.000 l
127.937 375.734 l
128.406 375.724 128.708 375.682 128.843 375.609  c
128.979 375.536 129.072 375.440 129.125 375.320  c
129.177 375.200 129.203 374.843 129.203 374.250  c
129.203 368.890 l
129.203 368.161 129.182 367.697 129.140 367.500  c
129.099 367.343 129.033 367.229 128.945 367.156  c
128.856 367.083 128.750 367.046 128.625 367.046  c
128.437 367.046 128.187 367.119 127.875 367.265  c
127.765 367.046 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
211.749 353.000 m
211.749 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
219.875 374.093 m
219.187 376.000 l
213.328 376.000 l
213.328 375.734 l
215.046 374.161 216.257 372.875 216.960 371.875  c
217.664 370.875 218.015 369.963 218.015 369.140  c
218.015 368.515 217.822 368.000 217.437 367.593  c
217.052 367.187 216.588 366.984 216.046 366.984  c
215.567 366.984 215.132 367.127 214.742 367.414  c
214.351 367.700 214.062 368.119 213.875 368.671  c
213.609 368.671 l
213.734 367.765 214.049 367.070 214.554 366.585  c
215.059 366.101 215.687 365.859 216.437 365.859  c
217.250 365.859 217.924 366.119 218.460 366.640  c
218.997 367.161 219.265 367.770 219.265 368.468  c
219.265 368.968 219.151 369.474 218.921 369.984  c
218.557 370.776 217.968 371.609 217.156 372.484  c
215.947 373.817 215.187 374.619 214.875 374.890  c
217.468 374.890 l
218.000 374.890 218.372 374.872 218.585 374.835  c
218.799 374.799 218.992 374.721 219.164 374.601  c
219.335 374.481 219.484 374.312 219.609 374.093  c
219.875 374.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
298.624 353.000 m
298.624 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
300.765 367.953 m
301.046 367.286 301.403 366.770 301.835 366.406  c
302.268 366.041 302.807 365.859 303.453 365.859  c
304.244 365.859 304.854 366.119 305.281 366.640  c
305.604 367.026 305.765 367.437 305.765 367.875  c
305.765 368.604 305.312 369.354 304.406 370.125  c
305.010 370.364 305.468 370.705 305.781 371.148  c
306.093 371.591 306.250 372.114 306.250 372.718  c
306.250 373.572 305.979 374.312 305.437 374.937  c
304.718 375.760 303.687 376.171 302.343 376.171  c
301.666 376.171 301.208 376.088 300.968 375.921  c
300.729 375.755 300.609 375.578 300.609 375.390  c
300.609 375.244 300.666 375.119 300.781 375.015  c
300.895 374.911 301.031 374.859 301.187 374.859  c
301.312 374.859 301.437 374.880 301.562 374.921  c
301.645 374.942 301.835 375.028 302.132 375.179  c
302.429 375.330 302.630 375.421 302.734 375.453  c
302.921 375.505 303.114 375.531 303.312 375.531  c
303.812 375.531 304.247 375.338 304.617 374.953  c
304.987 374.567 305.171 374.114 305.171 373.593  c
305.171 373.208 305.088 372.833 304.921 372.468  c
304.786 372.187 304.645 371.979 304.500 371.843  c
304.291 371.645 304.002 371.468 303.632 371.312  c
303.263 371.156 302.890 371.078 302.515 371.078  c
302.281 371.078 l
302.281 370.843 l
302.666 370.802 303.052 370.666 303.437 370.437  c
303.822 370.208 304.104 369.932 304.281 369.609  c
304.458 369.286 304.546 368.932 304.546 368.546  c
304.546 368.046 304.390 367.640 304.078 367.328  c
303.765 367.015 303.375 366.859 302.906 366.859  c
302.145 366.859 301.510 367.265 301.000 368.078  c
300.765 367.953 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
385.498 353.000 m
385.498 357.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
393.984 372.343 m
393.984 373.375 l
392.640 373.375 l
392.640 376.000 l
391.437 376.000 l
391.437 373.375 l
387.234 373.375 l
387.234 372.437 l
391.843 365.859 l
392.640 365.859 l
392.640 372.343 l
393.984 372.343 l
h
391.437 372.343 m
391.437 367.406 l
387.953 372.343 l
391.437 372.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
81.4373 353.000 m
81.4373 355.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
168.312 353.000 m
168.312 355.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
255.186 353.000 m
255.186 355.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
342.061 353.000 m
342.061 355.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
q
0 J
1 j
newpath
38.0000 353.000 m
38.0000 1.00000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
1 169 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 351.000 m
34.0000 351.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
35.8750 360.093 m
35.1875 362.000 l
29.3281 362.000 l
29.3281 361.734 l
31.0468 360.161 32.2578 358.875 32.9609 357.875  c
33.6640 356.875 34.0156 355.963 34.0156 355.140  c
34.0156 354.515 33.8229 354.000 33.4375 353.593  c
33.0520 353.187 32.5885 352.984 32.0468 352.984  c
31.5677 352.984 31.1328 353.127 30.7421 353.414  c
30.3515 353.700 30.0625 354.119 29.8750 354.671  c
29.6093 354.671 l
29.7343 353.765 30.0494 353.070 30.5546 352.585  c
31.0599 352.101 31.6875 351.859 32.4375 351.859  c
33.2500 351.859 33.9244 352.119 34.4609 352.640  c
34.9974 353.161 35.2656 353.770 35.2656 354.468  c
35.2656 354.968 35.1510 355.474 34.9218 355.984  c
34.5572 356.776 33.9687 357.609 33.1562 358.484  c
31.9479 359.817 31.1875 360.619 30.8750 360.890  c
33.4687 360.890 l
34.0000 360.890 34.3724 360.872 34.5859 360.835  c
34.7994 360.799 34.9921 360.721 35.1640 360.601  c
35.3359 360.481 35.4843 360.312 35.6093 360.093  c
35.8750 360.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 241.279 m
34.0000 241.279 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.8750 250.093 m
24.1875 252.000 l
18.3281 252.000 l
18.3281 251.734 l
20.0468 250.161 21.2578 248.875 21.9609 247.875  c
22.6640 246.875 23.0156 245.963 23.0156 245.140  c
23.0156 244.515 22.8229 244.000 22.4375 243.593  c
22.0520 243.187 21.5885 242.984 21.0468 242.984  c
20.5677 242.984 20.1328 243.127 19.7421 243.414  c
19.3515 243.700 19.0625 244.119 18.8750 244.671  c
18.6093 244.671 l
18.7343 243.765 19.0494 243.070 19.5546 242.585  c
20.0599 242.101 20.6875 241.859 21.4375 241.859  c
22.2500 241.859 22.9244 242.119 23.4609 242.640  c
23.9974 243.161 24.2656 243.770 24.2656 244.468  c
24.2656 244.968 24.1510 245.474 23.9218 245.984  c
23.5572 246.776 22.9687 247.609 22.1562 248.484  c
20.9479 249.817 20.1875 250.619 19.8750 250.890  c
22.4687 250.890 l
23.0000 250.890 23.3724 250.872 23.5859 250.835  c
23.7994 250.799 23.9921 250.721 24.1640 250.601  c
24.3359 250.481 24.4843 250.312 24.6093 250.093  c
24.8750 250.093 l
h
27.3750 250.578 m
27.6041 250.578 27.7968 250.658 27.9531 250.820  c
28.1093 250.981 28.1875 251.171 28.1875 251.390  c
28.1875 251.619 28.1093 251.812 27.9531 251.968  c
27.7968 252.125 27.6041 252.203 27.3750 252.203  c
27.1458 252.203 26.9531 252.125 26.7968 251.968  c
26.6406 251.812 26.5625 251.619 26.5625 251.390  c
26.5625 251.161 26.6406 250.968 26.7968 250.812  c
26.9531 250.656 27.1458 250.578 27.3750 250.578  c
h
35.7656 242.062 m
35.1875 243.312 l
32.2031 243.312 l
31.5468 244.640 l
32.8385 244.838 33.8645 245.322 34.6250 246.093  c
35.2708 246.750 35.5937 247.531 35.5937 248.437  c
35.5937 248.958 35.4895 249.440 35.2812 249.882  c
35.0729 250.325 34.8072 250.703 34.4843 251.015  c
34.1614 251.328 33.8020 251.578 33.4062 251.765  c
32.8437 252.036 32.2656 252.171 31.6718 252.171  c
31.0781 252.171 30.6458 252.070 30.3750 251.867  c
30.1041 251.664 29.9687 251.442 29.9687 251.203  c
29.9687 251.067 30.0260 250.947 30.1406 250.843  c
30.2552 250.739 30.3958 250.687 30.5625 250.687  c
30.6875 250.687 30.7968 250.705 30.8906 250.742  c
30.9843 250.778 31.1458 250.880 31.3750 251.046  c
31.7500 251.296 32.1250 251.421 32.5000 251.421  c
33.0729 251.421 33.5729 251.205 34.0000 250.773  c
34.4270 250.341 34.6406 249.812 34.6406 249.187  c
34.6406 248.593 34.4479 248.036 34.0625 247.515  c
33.6770 246.994 33.1458 246.593 32.4687 246.312  c
31.9375 246.093 31.2135 245.963 30.2968 245.921  c
32.2031 242.062 l
35.7656 242.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 131.558 m
34.0000 131.558 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
29.7656 133.953 m
30.0468 133.286 30.4036 132.770 30.8359 132.406  c
31.2682 132.041 31.8072 131.859 32.4531 131.859  c
33.2447 131.859 33.8541 132.119 34.2812 132.640  c
34.6041 133.026 34.7656 133.437 34.7656 133.875  c
34.7656 134.604 34.3125 135.354 33.4062 136.125  c
34.0104 136.364 34.4687 136.705 34.7812 137.148  c
35.0937 137.591 35.2500 138.114 35.2500 138.718  c
35.2500 139.572 34.9791 140.312 34.4375 140.937  c
33.7187 141.760 32.6875 142.171 31.3437 142.171  c
30.6666 142.171 30.2083 142.088 29.9687 141.921  c
29.7291 141.755 29.6093 141.578 29.6093 141.390  c
29.6093 141.244 29.6666 141.119 29.7812 141.015  c
29.8958 140.911 30.0312 140.859 30.1875 140.859  c
30.3125 140.859 30.4375 140.880 30.5625 140.921  c
30.6458 140.942 30.8359 141.028 31.1328 141.179  c
31.4296 141.330 31.6302 141.421 31.7343 141.453  c
31.9218 141.505 32.1145 141.531 32.3125 141.531  c
32.8125 141.531 33.2474 141.338 33.6171 140.953  c
33.9869 140.567 34.1718 140.114 34.1718 139.593  c
34.1718 139.208 34.0885 138.833 33.9218 138.468  c
33.7864 138.187 33.6458 137.979 33.5000 137.843  c
33.2916 137.645 33.0026 137.468 32.6328 137.312  c
32.2630 137.156 31.8906 137.078 31.5156 137.078  c
31.2812 137.078 l
31.2812 136.843 l
31.6666 136.802 32.0520 136.666 32.4375 136.437  c
32.8229 136.208 33.1041 135.932 33.2812 135.609  c
33.4583 135.286 33.5468 134.932 33.5468 134.546  c
33.5468 134.046 33.3906 133.640 33.0781 133.328  c
32.7656 133.015 32.3750 132.859 31.9062 132.859  c
31.1458 132.859 30.5104 133.265 30.0000 134.078  c
29.7656 133.953 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 21.8379 m
34.0000 21.8379 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.7656 23.9531 m
19.0468 23.2864 19.4036 22.7708 19.8359 22.4062  c
20.2682 22.0416 20.8072 21.8593 21.4531 21.8593  c
22.2447 21.8593 22.8541 22.1197 23.2812 22.6406  c
23.6041 23.0260 23.7656 23.4375 23.7656 23.8750  c
23.7656 24.6041 23.3125 25.3541 22.4062 26.1250  c
23.0104 26.3645 23.4687 26.7057 23.7812 27.1484  c
24.0937 27.5911 24.2500 28.1145 24.2500 28.7187  c
24.2500 29.5729 23.9791 30.3125 23.4375 30.9375  c
22.7187 31.7604 21.6875 32.1718 20.3437 32.1718  c
19.6666 32.1718 19.2083 32.0885 18.9687 31.9218  c
18.7291 31.7552 18.6093 31.5781 18.6093 31.3906  c
18.6093 31.2447 18.6666 31.1197 18.7812 31.0156  c
18.8958 30.9114 19.0312 30.8593 19.1875 30.8593  c
19.3125 30.8593 19.4375 30.8802 19.5625 30.9218  c
19.6458 30.9427 19.8359 31.0286 20.1328 31.1796  c
20.4296 31.3307 20.6302 31.4218 20.7343 31.4531  c
20.9218 31.5052 21.1145 31.5312 21.3125 31.5312  c
21.8125 31.5312 22.2474 31.3385 22.6171 30.9531  c
22.9869 30.5677 23.1718 30.1145 23.1718 29.5937  c
23.1718 29.2083 23.0885 28.8333 22.9218 28.4687  c
22.7864 28.1875 22.6458 27.9791 22.5000 27.8437  c
22.2916 27.6458 22.0026 27.4687 21.6328 27.3125  c
21.2630 27.1562 20.8906 27.0781 20.5156 27.0781  c
20.2812 27.0781 l
20.2812 26.8437 l
20.6666 26.8020 21.0520 26.6666 21.4375 26.4375  c
21.8229 26.2083 22.1041 25.9322 22.2812 25.6093  c
22.4583 25.2864 22.5468 24.9322 22.5468 24.5468  c
22.5468 24.0468 22.3906 23.6406 22.0781 23.3281  c
21.7656 23.0156 21.3750 22.8593 20.9062 22.8593  c
20.1458 22.8593 19.5104 23.2656 19.0000 24.0781  c
18.7656 23.9531 l
h
27.3750 30.5781 m
27.6041 30.5781 27.7968 30.6588 27.9531 30.8203  c
28.1093 30.9817 28.1875 31.1718 28.1875 31.3906  c
28.1875 31.6197 28.1093 31.8125 27.9531 31.9687  c
27.7968 32.1250 27.6041 32.2031 27.3750 32.2031  c
27.1458 32.2031 26.9531 32.1250 26.7968 31.9687  c
26.6406 31.8125 26.5625 31.6197 26.5625 31.3906  c
26.5625 31.1614 26.6406 30.9687 26.7968 30.8125  c
26.9531 30.6562 27.1458 30.5781 27.3750 30.5781  c
h
35.7656 22.0625 m
35.1875 23.3125 l
32.2031 23.3125 l
31.5468 24.6406 l
32.8385 24.8385 33.8645 25.3229 34.6250 26.0937  c
35.2708 26.7500 35.5937 27.5312 35.5937 28.4375  c
35.5937 28.9583 35.4895 29.4401 35.2812 29.8828  c
35.0729 30.3255 34.8072 30.7031 34.4843 31.0156  c
34.1614 31.3281 33.8020 31.5781 33.4062 31.7656  c
32.8437 32.0364 32.2656 32.1718 31.6718 32.1718  c
31.0781 32.1718 30.6458 32.0703 30.3750 31.8671  c
30.1041 31.6640 29.9687 31.4427 29.9687 31.2031  c
29.9687 31.0677 30.0260 30.9479 30.1406 30.8437  c
30.2552 30.7395 30.3958 30.6875 30.5625 30.6875  c
30.6875 30.6875 30.7968 30.7057 30.8906 30.7421  c
30.9843 30.7786 31.1458 30.8802 31.3750 31.0468  c
31.7500 31.2968 32.1250 31.4218 32.5000 31.4218  c
33.0729 31.4218 33.5729 31.2057 34.0000 30.7734  c
34.4270 30.3411 34.6406 29.8125 34.6406 29.1875  c
34.6406 28.5937 34.4479 28.0364 34.0625 27.5156  c
33.6770 26.9947 33.1458 26.5937 32.4687 26.3125  c
31.9375 26.0937 31.2135 25.9635 30.2968 25.9218  c
32.2031 22.0625 l
35.7656 22.0625 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 329.055 m
36.0000 329.055 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 307.111 m
36.0000 307.111 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 285.167 m
36.0000 285.167 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 263.223 m
36.0000 263.223 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 219.335 m
36.0000 219.335 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 197.391 m
36.0000 197.391 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 175.446 m
36.0000 175.446 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 153.502 m
36.0000 153.502 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 109.614 m
36.0000 109.614 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 87.6703 m
36.0000 87.6703 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 65.7261 m
36.0000 65.7261 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
38.0000 43.7820 m
36.0000 43.7820 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
